import pyupbit as py
import numpy as np
import pandas as pd
import requests
import matplotlib.pyplot as plt
import time

#기준1 stochastic RSI , 투자심리표

#매수후 손실 -3퍼이상일경우 일괄 매도 and 관망
#상승장에서 : sto RSI 0일때 매수, 100매도
#횡보장에서 : sto RSI 0일때 매수, 100매도
#하락장 : sto RSI 0 and 투자심리 10이하 매수, 90 매도


###RSI
import pyupbit as py
import numpy as np
import pandas as pd
import requests

class Env:
    def __init__(self,access,secret):
        self.price=0
        self.sto_remember=[]
        self.sto_remember2=[]
        
        self.count=0
        self.count2=0
        
        self.myToken = "key value"
        self.upbit=py.Upbit(access,secret)
        
        self.low_limit=0  #
        self.have=0      #
        self.have_price=0#
        self.balance=0   #자산
        
        self.buy_time=0 #매수후 텀을 두기위함
        self.plus_buy_count=0 #추가매수 횟수
        
        
    def reset(self):  
        self.sto_remember=[]
        self.sto_remember2=[]
        
        self.count=0
        self.count2=0
        
        
        self.low_limit=0
        self.have=0
        self.buy_check=0
        self.plus_buy_count=0
        
        
    def data_create(self,period,name,minute):   #데이터를 전처리하는 함수
        time.sleep(0.2)
        data=py.get_ohlcv(name,minute,count=1000)
        df=pd.DataFrame(data)
        series=pd.Series(df['close'].values)
        series2=pd.Series(df['volume'].values)
        
        return series,series2
            
    
    def sto_RSI(self,period,name,minute):  #stochastic RSI를 구하는 함수
        time.sleep(0.1)
        
        series,volume=self.data_create(period,name,minute)

        period=period
        smoothK=3
        smoothD=3

        delta = series.diff().dropna()
        ups = delta * 0
        downs = ups.copy()
        ups[delta > 0] = delta[delta > 0]
        downs[delta < 0] = -delta[delta < 0]
        ups[ups.index[period-1]] = np.mean( ups[:period] )
        ups = ups.drop(ups.index[:(period-1)])
        downs[downs.index[period-1]] = np.mean( downs[:period] )
        downs = downs.drop(downs.index[:(period-1)])
        rs = ups.ewm(com=period-1,min_periods=0,adjust=False,ignore_na=False).mean() / \
             downs.ewm(com=period-1,min_periods=0,adjust=False,ignore_na=False).mean() 
        rsi = 100 - 100 / (1 + rs)

        stochrsi  = (rsi - rsi.rolling(period).min()) / (rsi.rolling(period).max() - rsi.rolling(period).min())
        stochrsi_K = stochrsi.rolling(smoothK).mean()
        stochrsi_D = stochrsi_K.rolling(smoothD).mean()

        print(name,period,smoothK,smoothD)    
        print(' stoch_rsi_D: ', stochrsi_D.iloc[-1]*100,'----',minute,'분')
        print('')
        sto_rsi=stochrsi_D.iloc[-1]*100
        total_sto=stochrsi_D[:]
        plt.plot(stochrsi_D[50:])

        return sto_rsi,total_sto
    
    
    def Average_line(self,name,minute):  #이평선을 알려주는 함수
        data=py.get_ohlcv(name, interval=minute, count=1000)
        data=pd.Series(data['close'].values)
        A20=data.rolling(20).mean()
        A60=data.rolling(60).mean()
        A120=data.rolling(120).mean()
        
        return A20,A60,A120
    
    
    def VR(self,period,name,minute):   # volume Ratio 계산
        time.sleep(0.1)
        #VR=((N일간 상승일 거래량의 합)/(N일간 하락일 거래량의 합))*100
        series,Volume=self.data_create(period,name,minute)
        series=series.diff().dropna()

        ups=Volume*0
        down=Volume*0

        ups_index=series.index[series>0]
        down_index=series.index[series<0]

        ups[ups_index]=Volume[ups_index]
        down[down_index]=Volume[down_index]

        Volume_plus=ups.rolling(period).sum()
        Volume_minus1=down.rolling(period).sum()
        Volume_minus=np.abs(Volume_minus1)

        VR=(Volume_plus/Volume_minus)*100
        
        plt.plot(VR)
        
        return VR.iloc[-1],VR
    
    
    
    def sto_alarm(self,period,name,minute):    #매수이후 limit 두번넘을때 알려주는 알람
                                            #조건-잠깐 떨어졌다 오르는경우 있으므로 x sto60이하 갔다가 올라야카운트
        sto_RSI,total_RSI= self.sto_RSI(period,name,minute)
        end=0
        limit=0.70
        #sto_rsi 데이터 수집(실시간은 제외)
        if self.sto_remember ==[]:
            self.sto_remember.append(total_RSI.iloc[-2])
        else:
            if self.sto_remember[-1] != total_RSI.iloc[-2]:
                self.sto_remember.append(total_RSI.iloc[-2])
                
                
        #sto가 70퍼이상 몇번넘기는지 카운트
        if self.count==0 and len(self.sto_remember)>1:
            if self.sto_remember[-1]>self.sto_remember[-2] and self.sto_remember[-2]<=limit and self.sto_remember[-1]>limit:
                self.count+=1
        elif self.count>=1:
            if self.sto_remember[-1]<0.6:
                self.low_limit=1
            if self.low_limit==1 and self.sto_remember[-1]>self.sto_remember[-2] and self.sto_remember[-2]<=limit and self.sto_remember[-1]>limit:
                self.count+=1
                
                
                
        #종료 조건        
        if self.count>=2:     #sto79 2번 넘는순간 매도
            end=1
        return end
    
    
    def sto_alarm2(self,period,name,minute): #매수 이후 limit 두번넘고 limit 데드크로스때 알려주는 알람
        sto_RSI,total_RSI= self.sto_RSI(period,name,minute)
        end=0
        limit=0.20
        #sto_rsi 수집
        if self.sto_remember2==[]:
            self.sto_remember2.append(total_RSI.iloc[-2])
        else:
            if self.sto_remember2[-1] != total_RSI.iloc[-2]:
                self.sto_remember2.append(total_RSI.iloc[-2])
                
        
        # sto rsi가 15퍼이상 돌파할경우 카운트 
        if self.count2==0 and len(self.sto_remember2)>1:
            if self.sto_remember2[-1]>self.sto_remember2[-2] and self.sto_remember2[-2]<=limit and self.sto_remember2[-1]>limit:
                self.count2+=1
            
        elif self.count2>=1:   #2번오르고 떨어지는순간일때 매도
            if self.sto_remember2[-1]<self.sto_remember2[-2] and self.sto_remember2[-2]>limit and self.sto_remember2[-1]<=limit:
                end=1
                
        return end
    
    
    def trading_mind(self,period,name,minute):   #투자심리도를 구하는 함수
        time.sleep(0.1)
        series,series2=self.data_create(period,name,minute)
        series=series.diff().dropna()
        series=series/np.abs(series)
        
        up= series*0
        down= series*0
        
        up[series>0] = series[series>0]
        down[series<0]= series[series<0]
        
        up_count=up.rolling(period).sum()
        up_mean= up_count/period
        
        return up_mean
    
    
    
    def sto_limit_calculation(self,period,name,minute):   #stoRsi 의 리미트를 정하는 함수
        a,total=self.sto_RSI(period,name,minute)
        b=total.rolling(50).min()
        c=b.rolling(30).mean().iloc[-1]
        return c
        
    
    
    
    def message(self, token, channel, text):  #slack에 메세지를 보낸다
        response = requests.post("https://slack.com/api/chat.postMessage",
                                 headers={"Authorization": "Bearer " + token},
                                 data={"channel": channel, "text": text}
                                 )
        
        
        
    def have_check(self,have_data,have_name):   #가지고있는 코인중 have_name에 해당하는 코인이 있는지 체크한다
        for i in range(len(have_data)):
            z=have_data[i]['currency']
            if z==have_name:
                self.have=1
                break

            else:
                self.have=0
                
                
                
    def data_list(self):  #전일대비 높은 상위 20개종목중 거래량 제일많은것 출력 (하락중인거 제외)
                          #여기서 거래량은 각통화 기준이다. 즉 값이쌀수록 거래량이 많아질수있다 (업비트 거래량과 좀다름)
        
        data_List=[]  #등락0 이상 등락률과 이름  
        name_List=[]  #등락 상위 20 이름
        volume_list=[]  #등락 상위20 이름, 거래량
        volume_data=[] #거래량저장
        
        name_list=py.get_tickers('KRW')  #원화 전체 종목
        
        for name in name_list:
            data=py.get_ohlcv(name,'date',count=2)
            fluctuation=(data['close'][1]-data['close'][0])/data['close'][1]
            
            if fluctuation>0:              #추가
                data_List.append([fluctuation,name])
            time.sleep(0.1)
                
            print('종목 선택중......관찰대상 ',name)
        
        data_dict=dict(data_List)
        data_frame=pd.DataFrame(data_List)
            
        data_sorted=sorted(data_frame[0])
        data_20=data_sorted    
        data_20.reverse()           
        data_20[:20]  #전일대비 등락 상위 20개
        
        
        for value in data_20:    #상위20개 이름저장
            name_List.append(data_dict[value])
        
        for name2 in name_List:
            volume=py.get_ohlcv(name2,'date',count=1)['volume'][0]  #상위20개 데이터의 거래량
            volume_data.append([volume,name2])
            time.sleep(0.1)
            
        volume_max=max(volume_data)   #거래량,이름 
                 
        Name=volume_max[1]
        vol=volume_max[0]
        
        return Name,vol
    
    
    
    def time_(self):    #현시각 출력
        fseconds=time.time()
        second=int(fseconds%60)
        fseconds//=60
        minute=fseconds%60
        fseconds//=60
        hour=fseconds%24
        hour=(hour+9)%24
        
        return hour,minute,second
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    def buy_sell(self,name,balance,buy_or_sell,max_trading_money): #매매함수 (코인이름, 거래할 액수 , 살것인지팔것인지(0:sell , 1:buy))
        
        if buy_or_sell==1:  #매수인경우
            if balance>max_trading_money:
                balance=max_trading_money
            self.buy_time+=1
            res=self.upbit.buy_market_order(name,balance)
            print(name,'을',balance,'원 만큼 매수완료')

            self.message(self.myToken, "#stock-trading",'매수완료. 매수금액' )
            self.message(self.myToken, "#stock-trading",balance )
            
        elif buy_or_sell==0: #매도인경우
            res= self.upbit.sell_market_order(name,balance) #잔고만큼 시장가 매도
            self.reset()
            print(name,'을',balance,'만큼 매도했다')

            self.message(self.myToken, "#stock-trading",'매도. 매도금액' )
            self.message(self.myToken, "#stock-trading",balance )
            
        else:   #추매인경우
            if balance>max_trading_money:
                    balance=max_trading_money
            res=self.upbit.buy_market_order(name,env.balance)
            print(name,'을',balance,'원 만큼 매수완료')

            self.plus_buy_count+=1

            env.message(self.myToken, "#stock-trading",'추가 매수완료. 매수금액' )
            env.message(self.myToken, "#stock-trading",balance )
            
    
    def buy_condition(self,period,name,have_name,minute,test_or_start,max_trading_money):    #매매조건식함수
                                                                #.test_or_start (==1: 매매시작 이외:백테스팅)
    #################파라미터 설정################
            if test_or_start==1:  #실전매매일경우
                #현재 시간 계산
                
                current_hour,current_minute,current_second=self.time_()
                self.balance= self.upbit.get_balance(ticker="KRW")   #가진 원화
                have_data=self.upbit.get_balances()     #가지고있는 코인

                self.have_check(have_data,have_name)

                if current_minute%10==0 and current_second==0:            #매수하고나서 재매수까지 (추가매수제외) 10분의 텀을 둔다
                    self.buy_time=0


            else:              #back testing 인경우
                self.have=0
                self.balance=self.balance #자산
                self.buy_time=0 # 매수후 텀을 두기위함


            #sto_rsi 계산
            sto_rsi,total_sto =self.sto_RSI(period,name,minute)
            sto_rsi3,total_sto3=self.sto_RSI(period,name,'minute3')

            sto_rsi5,total_sto5=self.sto_RSI(period,name,'minute5')
            time.sleep(0.1)
            
            sto_rsi15,total_sto15=self.sto_RSI(period,name,'minute15')

            sto_rsi_limit=self.sto_limit_calculation(period,name,minute)
            sto_rsi_limit3=self.sto_limit_calculation(period,name,'minute3')
            
            vr,total_VR=self.VR(20,name,minute)
            print(vr,'VR')

        ##########################매수
            if self.have==0:   #해당코인 미보유일경우(최초매수 포지션)
                print(sto_rsi_limit3,'sto3리미트')
                print(sto_rsi_limit,'sto30리미트')
                #sto,VR    or   sto,투자심리
                if (total_sto.iloc[-1]<sto_rsi_limit or total_sto3.iloc[-1]<=sto_rsi_limit3) and self.buy_time==0:       
                    #30분봉 sto rsi 0.1이하, 실시간 3분봉 지표값 리미트이하
                    if test_or_start==1:
                        buy_or_sell=1
                        self.buy_sell(name,self.balance/3,buy_or_sell,max_trading_money)

                else:
                    print('매수시점 선정중...')



        ###########################매도

            else:       #해당코인 보유중일경우(매도포지션)
                
                end=self.sto_alarm(period,name,minute)
                end2=self.sto_alarm2(period,name,minute)

                if test_or_start==1:
                    print('팔시점 선정중...')
                    balance2= self.upbit.get_balance(name)
                    current_price= py.get_current_price(name)
                    self.have_price=0

                    for i in range(len(have_data)):
                        z=have_data[i]['currency']
                        if z==have_name:
                            env.have_price=float(have_data[i]['avg_buy_price'])  #평단가
                            break


                #############################매도조건
                if total_sto.iloc[-2]>0.95 or vr>160:
                    if test_or_start==1:
                        buy_or_sell=0   #매도
                        self.buy_sell(name,balance2,buy_or_sell,max_trading_money)

                ##############################손절 조건
                if ((current_price-env.have_price)/env.have_price)<0 and total_sto5.iloc[-1]>0.8 and  env.have==1:
                    #5분봉 sto rsi 0.9이상이고 손실이면 손절
                    if test_or_start==1:
                        buy_or_sell=0   #매도
                        self.buy_sell(name,balance2,buy_or_sell,max_trading_money)

                #############################추가매수 조건
                if ((current_price-env.have_price)/env.have_price)<0 and total_sto15.iloc[-(env.plus_buy_count+1)*3]<0.02 and env.have==1: 
                    if test_or_start==1:
                        buy_or_sell=2 #추가매수
                        self.buy_sell(name,self.balance/4,buy_or_sell,max_trading_money)
       
    
    
    def start_trading(self,name_):
        
        self.message(self.myToken, "#stock-trading", "트레이딩을 시작합니다")

        #---------------------------------------------------------
        ####로그인, 전체 잔고 조회
        
        self.balance= self.upbit.get_balance(ticker="KRW")
        self.message(self.myToken, "#stock-trading",'원화=' )
        self.message(self.myToken, "#stock-trading",env.balance )

        balances= self.upbit.get_balances()
        print('총자산',balances)



        #-------------------완성되면 삭제
        #Name,vol=env.data_list()
        #name=Name
        #have_name=Name.replace('KRW-','')

        name=name_
        have_name=name.replace('KRW-','')

        self.message(self.myToken, "#stock-trading",'종목선정')
        self.message(self.myToken, "#stock-trading",name )

        period=14       #stochastic의 기간
        VR_period=20
        minute='minute30'
        max_trading_money=100000
        mind_period=10

        #-------------------------

        ###매수시 하이퍼 파라미터
        VR_limit=30
        trading_mind_limit=0.2
        ###매도시 하이퍼 파라미터
        sto_rsi_limit2=0.8
        VR_limit2=160

        while True:
            self.buy_condition(period,name,have_name,minute,1,max_trading_money)
            time.sleep(1)
        

access='key value'
secret='key value'
env=Env(access,secret)

            
